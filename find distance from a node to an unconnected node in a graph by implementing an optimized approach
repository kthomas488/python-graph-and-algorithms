import os
import sys
from collections import defaultdict, deque

def rustMurderer(n, roads, s):
    # Main road graph
    graph = defaultdict(set)
    for u, v in roads:
        graph[u].add(v)
        graph[v].add(u)

    # Initialize distance and visited
    distance = [-1] * (n + 1)
    distance[s] = 0

    visited = set([s])
    queue = deque([s])

    # Maintain a set of unvisited nodes
    unvisited = set(range(1, n + 1))
    unvisited.remove(s)

    while queue:
        current = queue.popleft()
        # Get village road neighbors (not in main roads)
        # By set difference: unvisited - graph[current]
        to_visit = []
        for node in list(unvisited):
            if node not in graph[current]:
                distance[node] = distance[current] + 1
                queue.append(node)
                to_visit.append(node)
        
        # Remove the newly visited nodes from unvisited
        for node in to_visit:
            unvisited.remove(node)

    # Exclude the source node from the output
    return [distance[i] for i in range(1, n + 1) if i != s]
