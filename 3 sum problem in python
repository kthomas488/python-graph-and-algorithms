3 sum problem in python
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        ##j = i +1
        ##k = len(nums)-1
        index_list = []
        for i in range(len(nums)-2):
            if ( i> 0 and nums[i] == nums[i-1]):
                continue
            j = i+1
            k = len(nums) - 1
            while (j<k):
                sum = nums[i] + nums[j] + nums[k]
                if (sum == 0):
                    index_list.append([nums[i],nums[j],nums[k]])
                    while(j<k and nums[j] == nums[j+1]):
                        j=j+1
                    while(j<k and nums[k] == nums[k-1]):
                        k=k-1
                    j=j+1
                    k=k-1
                elif ( sum < 0):
                    j=j+1
                elif (sum >0):
                    k=k-1
        return index_list        
