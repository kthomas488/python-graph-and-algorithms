from collections import defaultdict
from collections import deque

def shorttest_distances_path(start,graph):
    distances = {start:0}
    visited = set([start])
    queue = deque([start])
    while queue:
        node = queue.popleft()
        for neighbour in graph[node]:
            if neighbour not in visited:
                visited.add(neighbour)
                distances[neighbour] = distances[node]+1
                queue.append(neighbour)
    return distances


graph = defaultdict(list)

edges = [
    (0, 1),
    (0, 2),
    (1, 2),
    (2, 3)
]


for u,v in edges:
    graph[u].append(v)
    graph[v].append(u)

print("print graph:" + str(graph))

##visited = set()
print("Calling bsh shortest path first search")
short_dist = shorttest_distances_path(0,graph)
print("Printing the shortest path from node 0")

for node,dist in short_dist.items():
    print(f"Node {node} -> Distance {dist}")

